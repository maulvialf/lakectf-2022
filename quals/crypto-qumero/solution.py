#!/usr/bin/env python3

from Crypto.Util.number import *
from math import prod

# As we can see that the n is like RSA modules.
# The main idea of this task based on fact pow(n+1, m, n**2) = 1 + m*n 

# In each step we can get the pow(_g, m, n**2) for every prime _g. So we try to factor (n + 1) and fine its prime factors.
# factor(n + 1) = 2 67 2917 138923 1842611 263319779 92258823306127 130186789928939100167 39186420818004373904055316606023574160795705294530594872940848847629525793295418227353139658337

# That is:
g = 5
n = 12400607165090104525057498825576429042080669317387281221346279651195782812193786824216310465835175634398725543629075359418414630251704185041070962835003337
PRIMES = [2, 67, 2917, 138923, 1842611, 263319779, 92258823306127, 130186789928939100167, 39186420818004373904055316606023574160795705294530594872940848847629525793295418227353139658337]

# Then we find the pow(_g, m, n**2) for each _g in PRIMES by interacting with server:

enc_flag = 70180564886477595255089533875755486774849774477921572876122819149617586221011748256444174816096884411509712458443765516472857486879134418602108572633326460117850718224262542893287863689747575603494723810015073376072185525360859785811148125174926670175335436819233672495262430269701050114120330665873694748295

ENC = [
	# _g1 = 2
	129756479801107700672680344009777555979394194519756227016018351086211610169090020810330543513631277229611797680633220981355834530738294968771274113931589856454503755369969124024859539659398818609748093010876790095408117636822130486922729162035367900632863011657096499152522880225729176765569256239867288594541,
	# _g2 = 67
	27470714225465421763150905279950928195995338257313328431851844528262559175214696013565820433458531590289960819014229021307037893792430106493693624916560973107990949489992060577915430746586664114938815713883945951413693333849595351564648153466732708837718920669838554071518398981094443080349652092905792258764,
	# _g3 = 2917
	96615110922823647839053574239426405267233015600665054287501335206468937349074477594530791082336485525369171459494211750608729963574600967694477760143020430927709645826690542266482564414428268017451671390961571934106815424336697055936177877744171183498234031185326024161546310894429875096890652175474386196330,
	# _g4 = 138923
	132298559798978700867979348978552173007973440363262721779854197775685045036483960956580774860095618332670804864543598739032237264237738353047100008647106398493727214195813579196081675267199228127152085607450543073054265801991721747195893890728020684645546604939421715976358080352083401888872396975810549971555,
	# _g5 = 1842611
	109756702346027123331537361108520654984168268151379648494282260992481084418118696364224973501840418762384200651084795767453091939252364198196819564587345178354633489328555998364589012314237353957934121947328695910685313069533062038970371735945946836470006514543953695225690782931862603299915161460028894368098,
	# _g6 = 263319779
	104066641242568507035470538955667782157070154527640627456114741104675378144385918458011135025965439258680691493555641262363751371501773640373834397230579311086411340036070078054360824774886692953992080185707975236257673642033588725719165098126803326853107117947738563276082193747455465716044260227799072308426,
	# _g7 = 92258823306127
	104557225326776470346764200074321734227597644973620657105370356959649118268898209773342500260815645717062578232358034583205500936932217858663734546178822353247544184698138478197617937748538232096120157718565926451767364763872423728596152568380928528646529284220867003104581251875304485882564396963273506822173,
	# _g8 = 130186789928939100167
	2431217295980146279928859003551945481340755806128089162847739524733270171420671262986422620880477437105343887459348721364462963630238541578166665520837226304354952232140592479155862344450863764410898592314330942556443346308584911223512039663487034739391281232920321947348959914772869182427890542660792397208,
	# _g9 = 39186420818004373904055316606023574160795705294530594872940848847629525793295418227353139658337
	70180564886477595255089533875755486774849774477921572876122819149617586221011748256444174816096884411509712458443765516472857486879134418602108572633326460117850718224262542893287863689747575603494723810015073376072185525360859785811148125174926670175335436819233672495262430269701050114120330665873694748295
]

# hence 
# _g1 * _g2 * _g3 * _g4 * _g5 * _g6 * _g7 * _g8 * _g9 = n + 1

# By applying the fact pow(n+1, m, n**2) = 1 + m*n, we can deduce that:

# pow(_g1 * _g2 * _g3 * _g4 * _g5 * _g6 * _g7 * _g8 * _g9, m, n ** 2) = 1 + m * n

# finally 

result  = prod(ENC) % (n ** 2)
m = (result - 1) // n

print(f'flag = {long_to_bytes(m)}')